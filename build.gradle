plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id("org.sonarqube") version "5.1.0.4882"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-core:6.2.4'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
//	implementation 'org.springframework.amqp:spring-rabbit:3.1.4'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'ch.qos.logback:logback-classic'

	testImplementation 'org.mockito:mockito-core:5.12.0'

	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.3'

}

//tasks.named('test') {
//	useJUnitPlatform()
//}

test {
	useJUnitPlatform {
		includeTags 'unit'
	}

	// parrallel test execution
//	maxParallelForks = Runtime.runtime.availableProcessors()

}

task integrationTest(type: Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
//	maxParallelForks = Runtime.runtime.availableProcessors()
}

jacoco {
	toolVersion = "0.8.12"

}

jacocoTestReport {
//	dependsOn test, integrationTest
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(files(
				fileTree(dir: "$buildDir/classes/java/main").include("**/*.class"),
				fileTree(dir: "$buildDir/classes/java/integrationTest").include("**/*.class")
		))
		executionData.setFrom(files(
				fileTree(dir: "$buildDir").include("jacoco/test.exec"),
				fileTree(dir: "$buildDir").include("jacoco/integrationTest.exec")
		))
	}
}

// for to know the number of available processors
task printCpuInfo {
	doLast {
		def availableProcessors = Runtime.runtime.availableProcessors()
		println "Available processors: ${availableProcessors}"
	}
}

//jacocoTestCoverageVerification {
//	violationRules {
//		rule {
//			limit {
//				minimum = 0.5
//			}
//		}
//
//		rule {
//			enabled = false
//			element = 'CLASS'
//			includes = ['org.gradle.*']
//
//			limit {
//				counter = 'LINE'
//				value = 'TOTALCOUNT'
//				maximum = 0.3
//			}
//		}
//	}
//}